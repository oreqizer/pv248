# Write a function ‹is_generated› which checks whether word ‹final›
# can be generated by a rewrite system described by ‹rules› starting
# from word ‹initial›.

# The rewrite system is given as a ‹dict›, where keys are ‹str› and
# values are each a ‹list› of ‹str›. The key is the left-hand side
# of a rule (see below) while the list gives all possible right-hand
# sides to go with it. The initial string and the string to be
# generated (‹final›) are given as ‹str› instances.

def is_generated( rules, initial, final ):
    pass

# A rewrite system is like a grammar, but does not distinguish
# between terminals and non-terminals. There are only letters, and
# the rules say that a given substring can be rewritten to some
# other substring. For instance, consider the rules:
#
#  1. ‹x› → ‹xx› (any ‹x› in the string can be doubled)
#  2. ‹xx› → ‹xyz›
#  3. ‹xx› → ‹xyx›
#
# Starting from ‹xy›, a possible derivation would be:
#
#  1. use rule 1 to obtain ‹xxy›
#  2. use rule 2 to obtain ‹xyzxy›
#  3. use rule 1 again to obtain ‹xyzxxy›
#
# All of the words which appear above are said to be generated by
# the rewrite system. More formally, a word is generated by the
# system if it can be obtained by applying a finite sequence of rules.
# Each rule can be applied in an arbitrary position (i.e. wherever
# you like). In this exercise, the right side of a rule is always
# strictly longer than the left side (this reduces the power of the
# system considerably and makes the exercise much easier to solve).

def test_main():
    rules = { 'x':  [ 'xx' ],
              'xx': [ 'xyz', 'xyx' ] }

    assert is_generated( rules, 'x', 'xx' )
    assert is_generated( rules, 'x', 'xyz' )
    assert is_generated( rules, 'x', 'xyx' )
    assert is_generated( rules, 'x', 'xyzyxyz' )
    assert is_generated( rules, 'x', 'xxyxx' )
    assert is_generated( rules, 'x', 'xxyxx' )
    assert is_generated( rules, 'x', 'xxxyxxxxx' )
    assert is_generated( rules, 'x', 'xyxxyz' )
    assert is_generated( rules, 'x', 'xyzxyx' )
    assert is_generated( rules, 'x', 'xyzxxx' )

    assert not is_generated( rules, 'x', 'y' )
    assert not is_generated( rules, 'x', 'xxy' )
    assert not is_generated( rules, 'xxx', 'xyx' )
    assert not is_generated( rules, 'xxx', 'xyz' )
    assert not is_generated( rules, 'x', 'xyzxxy' )

if __name__ == "__main__":
    test_main()

# Bonus 1: Can you implement a variant where the right-hand side of
# a rule can be of the same length as the left-hand side? Can you
# guarantee that your program terminates?

# Bonus 2: Can you further relax the restrictions, so that the
# right-hand side can be shorter than the left-hand side? Is it
# harder than the version from bonus 1? Can you still guarantee
# termination?
